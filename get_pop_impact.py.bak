#------------------------------------------------------------------------------
# Name:        getPopHazardImpact
# Purpose:     Calculates the total number of the population impacted
#              by the hazards
#
# Author:      Arie Claassens
#
# Created:     11-07-2016
# Copyright:   (c) Arie Claassens 2016
# License:     GNU GPL. View the LICENSE file.
#------------------------------------------------------------------------------

"""
Calculate the total population potentially affected by virtue of being
located within a predefined buffer distance from the hazard point or area.
"""

#Import libraries
import logging
import logging.handlers
import time
from decimal import Decimal, getcontext #For progress COUNTER
import arcpy

# Functions and classes
# Adapted from:
# http://gis.stackexchange.com/questions/135920/arcpy-logging-error-messages
class ArcPyLogHandler(logging.handlers.RotatingFileHandler):
	"""
	Custom logging class that bounces messages to the arcpy tool window and
	reflects back to the log file.
	"""
	def emit(self, record):
		"""
		Write the log message to the tool output window (stdout) and log file.
		"""
		try:
			msg = record.msg.format(record.args)
		#except:
		except Exception as inst:
			# Log the exception type and all error messages returned
			arcpy.AddError(type(inst))
			arcpy.AddError(arcpy.GetMessages())
			msg = record.msg

		if record.levelno >= logging.ERROR:
			arcpy.AddError(msg)
		elif record.levelno >= logging.WARNING:
			arcpy.AddWarning(msg)
		elif record.levelno >= logging.INFO:
			arcpy.AddMessage(msg)

		super(ArcPyLogHandler, self).emit(record)

# Adapted from:
# http://bjorn.kuiper.nu/2011/04/21/tips-tricks-fieldexists-for-arcgis-10-python
def fieldexist(featureclass, fieldname):
	"""
	Test for the existence of fieldname in featureclass. Returns True if the
	field exists and False if it does not.
	"""
	fieldlist = arcpy.ListFields(featureclass, fieldname)
	fieldcount = len(fieldlist)
	return bool(fieldcount == 1)

def get_projection(featureclass):
	"""
	Find and return the full spatial reference of a feature class
	"""
	description = arcpy.Describe(featureclass)
	# Export the full text string to ensure a 100% match, preventing
	# discrepancies with differing central meridians, for example.
	proj = description.SpatialReference.exporttostring()
	return proj

def compare_list_items(checklist):
	"""
	Loop through the list and compare the items to determine if any item
	is a mismatch with the first item in the list. Used to check for spatial
	reference mismatches between feature classes.
	"""
	mismatch = False # Local variable to store match results
	check = '' # Local variable to store the spatial projection
	for item in checklist:
		LOGGER.debug("Processing %s" % item)
		if check == '': # Nothing captured yet, use the first item as base
			check = item
			LOGGER.debug("The check is now %s" % item)
		else:
			# Test if they match
			if check == item:
				LOGGER.debug("The items match. Continue testing")
			else:
				mismatch = True
				LOGGER.debug("The check and current item mismatch")
				break # Break out of the for loop. no further testing needed

	LOGGER.info("Is there a spatial reference mismatch? " + str(mismatch))
	if mismatch:
		LOGGER.critical("Spatial reference mismatch detected.")
	else:
		LOGGER.info("Spatial references of all the feature classes match.")

	return mismatch

# User Input parameters
LOGLEVEL = str(arcpy.GetParameterAsText(0)).upper()
LOGDIR = arcpy.GetParameterAsText(1)
CHECK_PROJ = arcpy.GetParameterAsText(2) # Boolean result received as text
TARGET_FC = arcpy.GetParameterAsText(3)
POP_RASTER = arcpy.GetParameterAsText(4)
BUFFER_DIST = arcpy.GetParameterAsText(5) # buffer distance in meters
UPDATE_ONLY = arcpy.GetParameterAsText(6) # Boolean result received as text

# Tool Parameters
arcpy.env.addOutputsToMap = False
getcontext().prec = 4 # Set decimal precision
REQUIRED_FIELDS = ['POPULATION', 'POPULATION_BUFFER_DIST']
REQUIRED_FIELD = "POPULATION" # Which field must we filter on and check for?
POPFEATCLASS_LIST = [] # Empty list that will store the feature classes to process
POPFEATLAYER_LIST = [] # Empty list that will store feature layers
# Append the Meters required for the buffer distance parameter
BUFFER_DISTM = BUFFER_DIST + " Meters"
COUNTER = 0

# Tool configuration:
# Set up the logging parameters and inform the user
DATE_STRING = time.strftime("%Y%m%d")
LOGFILE = unicode(LOGDIR + '\\'+ DATE_STRING +
				  '_mcdatool.log').encode('unicode-escape')
MAXBYTES = 2097152 # 2MB
BACKUPCOUNT = 10
# Change this variable to a unique identifier for each script it runs in.
# Cannot use LOGGER.findCaller(), as we're calling from an embedded script in
# the Python toolbox.
LOGSTAMP = "AddPOPImpact" # Identifies the source of the log entries
LOGGER = logging.getLogger(LOGSTAMP)
HANDLER = ArcPyLogHandler(LOGFILE, MAXBYTES, BACKUPCOUNT)
FORMATTER = logging.Formatter("%(asctime)s %(name)-15s %(levelname)-8s %(message)s")
HANDLER.setFormatter(FORMATTER)
LOGGER.addHandler(HANDLER)
LOGGER.setLevel(LOGLEVEL)
LOGGER.debug("------- START LOGGING-----------")
# Use the default arcpy.AddMessage method to only show this in the tool output
# window, otherwise we will log it to the log file too.
arcpy.AddMessage("Your Log file is: " + LOGFILE)

# Define the query filter
# Should we only update or process all records? True if selected by the user
if not UPDATE_ONLY:
	QRY_FILTER = REQUIRED_FIELD + " IS NOT NULL"
else:
	QRY_FILTER = ""
LOGGER.debug("QRY_FILTER is: " + QRY_FILTER)

# Put everything in a try/finally statement, so that we can close the logger
# even if the script bombs out or we raise an execution error along the line
try:
	# Sanity checks:

	# Check if the target feature class has any features before we start
	if int(arcpy.GetCount_management(TARGET_FC)[0]) == 0:
		LOGGER.error("{0} has no features. Please use a feature class that \
					  already contains the required features and attributes." \
					  .format(TARGET_FC))
		raise arcpy.ExecuteError

	# Check if the target feature class has all of the required attribute fields.
	for checkfield in REQUIRED_FIELDS:
		if not fieldexist(SOURCE_FC, checkfield):
			LOGGER.debug("Check for field: " + checkfield)
			LOGGER.error("The field "+ checkfield +" does not exist. \
							 Please use the correct feature class.")
			raise arcpy.ExecuteError


	# We need at least one FC to work with, check first if it has content
	if int(arcpy.GetCount_management(POP_FC1)[0]) == 0:
		LOGGER.error("{0} has no features. Please use a feature class that \
					   contains data.".format(POP_FC1))
		raise arcpy.ExecuteError

	# Compare the spatial references of the input data sets, unless the user
	# actively chooses not to do so.
	LOGGER.info("Check for spatial reference mismatches? : " + CHECK_PROJ)
	if CHECK_PROJ == 'true':
		#LOGGER.info(TARGET_FC)
		LIST_FC = [] # Emtpy list to store FC
		# Add spatial references of all items
		LIST_FC.append(get_projection(TARGET_FC))
		LIST_FC.append(get_projection(LANDCOVER_RASTER))
		LOGGER.debug("The list of spatial references to check is:")
		LOGGER.debug(LIST_FC)
		LOGGER.info("Comparing spatial references of the data sets")
		# Check for mismatching spatial references
		MISMATCHED = compare_list_items(LIST_FC)
		if MISMATCHED:
			# Terminate the main thread
			# See https://docs.python.org/2/library/sys.html#sys.exit
			sys.exit(0)

	# Determine if we are working with a POINT or POLYGON shape type and adjust
	# the fields list to use the inside centroid X and Y fields added in the
	# first step, i.e. INSIDE_X and INSIDE_Y
	FC_DESC = arcpy.Describe(TARGET_FC)
	if FC_DESC.shapeType == "Point":
		LOGGER.info("POINT feature class detected. Proceeding.")
		FIELDLIST = ['OBJECTID', 'SHAPE@X', 'SHAPE@Y', REQUIRED_FIELD]
	elif FC_DESC.shapeType == "Polygon":
		LOGGER.info("POLYGON feature class detected. Proceeding.")
		FIELDLIST = ['OBJECTID', 'INSIDE_X', 'INSIDE_Y', REQUIRED_FIELD]
	else:
		LOGGER.error("Unsupported shape type detected. Please use a \
	feature class with a POINT or POLYGON shape type")
		raise arcpy.ExecuteError

	LOGGER.info("Starting the Population Impact calculations")
	START_TIME = time.time()

	arcpy.MakeFeatureLayer_management(POP_FC1, "inputPop", QRY_FILTER)

	arcpy.MakeFeatureLayer_management(TARGET_FC, "inputHazard", QRY_FILTER)
	RECORD_COUNT = int(arcpy.GetCount_management("inputHazard").getOutput(0))
	#arcpy.AddMessage("Total number of features: " + str(RECORD_COUNT))

	with arcpy.da.UpdateCursor(TARGET_FC, ['OBJECTID', 'POPULATION',
										   'POPULATION_BUFFER_DIST'],
							   QRY_FILTER) as cursor:
		for row in cursor:
			#Loop through HazardBuffer FC
			COUNTER += 1
			# Convert to decimal
			# See https://docs.python.org/2.7/library/decimal.html
			pctDone = Decimal(COUNTER)/Decimal(RECORD_COUNT) * 100
			arcpy.AddMessage("Processing OID " + str(row[0]) +
							 ", with POPULATION of "+ str(row[1]) + ". Feature " +
							 str(COUNTER) + " of " + str(RECORD_COUNT) +
							 " or " + str(pctDone) + " %")

			# Select the current feature from original Hazard FC
			arcpy.SelectLayerByAttribute_management("inputHazard",
													"NEW_SELECTION",
													"OBJECTID = " + str(row[0]))

			# Select all features in the population feature class that intersects
			# with the current hazard feature
			# Takes longer due to the buffering done as part of each query.
			outputPop = arcpy.SelectLayerByLocation_management("inputPop",
															   "WITHIN_A_DISTANCE_GEODESIC",
															   "inputHazard",
															   BUFFER_DISTM, "")
			totPop = 0
			for row2 in outputPop:
				# display OIDs of selected features
				#arcpy.AddMessage(row2.getSelectionSet())

				# http://desktop.arcgis.com/en/arcmap/10.3/analyze/arcpy-data-access/featureclasstonumpyarray.htm
				arr = arcpy.da.FeatureClassToNumPyArray(row2, "grid_code",
														skip_nulls=True)
				#arcpy.AddMessage(arr["grid_code"].sum())
				totPop += arr["grid_code"].sum()

			# Update the row with the population sum
			arcpy.AddMessage("totPop is: " + str(totPop))
			# Round floating number and cast as integer
			arcpy.AddMessage("Potential Pop affected by Hazard:" +
							 str(int(round(totPop))))
			# Assign the new value to the POPULATION field
			row[1] = int(round(totPop))
			# Assign the buffer distance to the POPULATION buffer distance field
			row[2] = BUFFER_DIST
			cursor.updateRow(row)
			arcpy.AddMessage("----------")

	STOP_TIME = time.time()
	arcpy.AddMessage("Total execution time in seconds = " +
					 str(int(STOP_TIME-START_TIME)) + " and in minutes = " +
					 str(int(STOP_TIME-START_TIME)/60))

finally:
	# Shut down logging after script has finished running.
	#http://stackoverflow.com/questions/24816456/python-logging-wont-shutdown
	LOGGER.debug("------- STOP LOGGING-----------")
	LOGGER.removeHandler(HANDLER)
	HANDLER.close()
	logging.shutdown()